# Maxim Performance Optimization Configuration
# Advanced performance monitoring and optimization for Pragati

version: "1.0"

performance:
  monitoring:
    enabled: true
    metrics_collection_interval: 30s
    retention_period: "30d"
    
  optimization:
    auto_scaling:
      enabled: true
      min_instances: 2
      max_instances: 20
      cpu_threshold: 70
      memory_threshold: 80
      
    caching:
      redis:
        enabled: true
        ttl: 3600
        max_memory: "1gb"
      cdn:
        enabled: true
        provider: "cloudflare"
        cache_static_assets: true
        
    database:
      connection_pooling:
        enabled: true
        min_connections: 5
        max_connections: 50
      query_optimization:
        enabled: true
        slow_query_threshold: "1s"
        index_recommendations: true
        
  profiling:
    python:
      enabled: true
      profiler: "py-spy"
      sampling_rate: 100
      
    javascript:
      enabled: true
      profiler: "clinic.js"
      heap_profiling: true
      
  load_testing:
    enabled: true
    scenarios:
      - name: "user_login"
        endpoint: "/api/v1/auth/login"
        concurrent_users: 100
        duration: "5m"
        
      - name: "dashboard_load"
        endpoint: "/api/v1/dashboard"
        concurrent_users: 200
        duration: "10m"
        
      - name: "analytics_query"
        endpoint: "/api/v1/analytics"
        concurrent_users: 50
        duration: "3m"

alerts:
  performance:
    - name: "high_response_time"
      condition: "avg_response_time > 2000ms"
      severity: "warning"
      
    - name: "high_error_rate"
      condition: "error_rate > 5%"
      severity: "critical"
      
    - name: "memory_usage"
      condition: "memory_usage > 85%"
      severity: "warning"
      
    - name: "cpu_usage"
      condition: "cpu_usage > 80%"
      severity: "warning"

optimization_rules:
  frontend:
    - "Enable gzip compression"
    - "Minify JavaScript and CSS"
    - "Optimize images (WebP format)"
    - "Implement lazy loading"
    - "Use React.memo for expensive components"
    - "Implement virtual scrolling for large lists"
    
  backend:
    - "Optimize database queries"
    - "Implement response caching"
    - "Use async operations"
    - "Optimize serialization"
    - "Implement connection pooling"
    - "Use background tasks for heavy operations"
    
  ml_engine:
    - "Model quantization"
    - "Batch prediction requests"
    - "Cache model predictions"
    - "Use GPU acceleration when available"
    - "Implement model versioning"

benchmarks:
  targets:
    page_load_time: "< 2s"
    api_response_time: "< 500ms"
    ml_prediction_time: "< 1s"
    database_query_time: "< 100ms"
    memory_usage: "< 80%"
    cpu_usage: "< 70%"
    
  reporting:
    frequency: "daily"
    format: ["json", "html"]
    recipients: ["dev-team@pragati.com"]
